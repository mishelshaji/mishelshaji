<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mishel Shaji</title>
    <link>https://mishelshaji.com/</link>
    <description>Recent content on Mishel Shaji</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Feb 2025 17:27:01 +0530</lastBuildDate><atom:link href="https://mishelshaji.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create Buttons With Rounded Corner in Wpf</title>
      <link>https://mishelshaji.com/blog/create-buttons-with-rounded-corner-in-wpf/</link>
      <pubDate>Fri, 14 Feb 2025 17:27:01 +0530</pubDate>
      
      <guid>https://mishelshaji.com/blog/create-buttons-with-rounded-corner-in-wpf/</guid>
      <description>&lt;p&gt;In this post, we&amp;rsquo;ll learn to create buttons with rounded corners in WPF.&lt;/p&gt;
&lt;p&gt;The default button template in WPF has a border. So, we have to change value of the CornerRadius property of the border in the button template.&lt;/p&gt;
&lt;h2 id=&#34;single-button-with-rounded-corners&#34;&gt;Single Button With Rounded Corners&lt;/h2&gt;
&lt;p&gt;If you want rounded corners for a single button, modify the XAML code as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Content=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button.Resources&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Style&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TargetType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Border&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Property=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CornerRadius&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Button.Resources&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;apply-to-all-buttons&#34;&gt;Apply to all Buttons&lt;/h2&gt;
&lt;p&gt;To apply rounded corners to all buttons in the application, add this style in the App.xaml file in the Application.Resources tag.&lt;/p&gt;</description>
      <content>&lt;p&gt;In this post, we&amp;rsquo;ll learn to create buttons with rounded corners in WPF.&lt;/p&gt;
&lt;p&gt;The default button template in WPF has a border. So, we have to change value of the CornerRadius property of the border in the button template.&lt;/p&gt;
&lt;h2 id=&#34;single-button-with-rounded-corners&#34;&gt;Single Button With Rounded Corners&lt;/h2&gt;
&lt;p&gt;If you want rounded corners for a single button, modify the XAML code as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Content=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Button.Resources&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Style&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TargetType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Border&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Property=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CornerRadius&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Button.Resources&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;apply-to-all-buttons&#34;&gt;Apply to all Buttons&lt;/h2&gt;
&lt;p&gt;To apply rounded corners to all buttons in the application, add this style in the App.xaml file in the Application.Resources tag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Application.Resources&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Style&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TargetType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Property=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Template&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ControlTemplate&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TargetType=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Border&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CornerRadius=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#a6e22e&#34;&gt;Background=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DarkGray&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#a6e22e&#34;&gt;BorderThickness=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ContentPresenter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#a6e22e&#34;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Center&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#a6e22e&#34;&gt;VerticalAlignment=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Center&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#a6e22e&#34;&gt;Margin=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{TemplateBinding Padding}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;lt;/ContentPresenter&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Border&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ControlTemplate&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Application.Resources&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a screenshot of the result.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>C Sharp Program to Find Duplicate Characters in a String</title>
      <link>https://mishelshaji.com/blog/c-sharp-program-to-find-duplicate-characters-in-a-string/</link>
      <pubDate>Fri, 14 Feb 2025 17:20:48 +0530</pubDate>
      
      <guid>https://mishelshaji.com/blog/c-sharp-program-to-find-duplicate-characters-in-a-string/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll learn three different ways to find duplicate characters in a string using C#.&lt;/p&gt;
&lt;p&gt;Please import the following namespaces first before continuing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Linq;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-using-linq-groupby&#34;&gt;1) Using LINQ GroupBy&lt;/h2&gt;
&lt;p&gt;This is one of the easiest ways to find duplicate characters from a string. In this example, first, we use the GroupBy() method from the System.Linq namespace to group the characters.&lt;/p&gt;
&lt;p&gt;Then we filter the groups with more than one member using the LINQ Where() method to find duplicate characters.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll learn three different ways to find duplicate characters in a string using C#.&lt;/p&gt;
&lt;p&gt;Please import the following namespaces first before continuing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Linq;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-using-linq-groupby&#34;&gt;1) Using LINQ GroupBy&lt;/h2&gt;
&lt;p&gt;This is one of the easiest ways to find duplicate characters from a string. In this example, first, we use the GroupBy() method from the System.Linq namespace to group the characters.&lt;/p&gt;
&lt;p&gt;Then we filter the groups with more than one member using the LINQ Where() method to find duplicate characters.&lt;/p&gt;
&lt;p&gt;The key of each group is the character based on which the group is formed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; s = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a string&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; groups = s.GroupBy(c =&amp;gt; c).Where(g=&amp;gt;g.Count() &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; groups)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#66d9ef&#34;&gt;group&lt;/span&gt;.Key);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-indexof-method&#34;&gt;Using IndexOf Method&lt;/h2&gt;
&lt;p&gt;In this example, we&amp;rsquo;re comparing the index of each character of the string.&lt;/p&gt;
&lt;p&gt;First, we use a foreach loop to fetch each character from the string, Then we find the first and last index of the character. If the first and last index of the character is the same, the character occurs only once. Else, the character occurs multiple times in the string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; s = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a string&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; duplicates = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s.IndexOf(item) != s.LastIndexOf(item) &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        !duplicates.Contains(item))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        duplicates.Add(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, duplicates));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-for-loop-to-compare&#34;&gt;Using for Loop To Compare&lt;/h2&gt;
&lt;p&gt;This is the most basic way to solve this problem. In this method, we have to use two foreach loops.&lt;/p&gt;
&lt;p&gt;In this example, we take each character from the string and compare it with all other characters in the string. If a match is found, the count is incremented. If the total count of a character is more than 1, it means that the character occurred multiple times in the string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; s = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a string&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; duplicates = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; charCount = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; chars &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (item == chars)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            charCount++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(charCount &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; !duplicates.Contains(item))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        duplicates.Add(item);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, duplicates));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have any suggestions or a better solution, please share them in the comments.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Program to Check if a String Is Palindrome or Not in C Sharp</title>
      <link>https://mishelshaji.com/blog/program-to-check-if-a-string-is-palindrome-or-not-in-c-sharp/</link>
      <pubDate>Fri, 14 Feb 2025 15:58:10 +0530</pubDate>
      
      <guid>https://mishelshaji.com/blog/program-to-check-if-a-string-is-palindrome-or-not-in-c-sharp/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A palindrome is a group of characters or a word that reads the same if we read from left to right and right to left. An example of a palindrome string is the word &amp;ldquo;MALAYALAM&amp;rdquo;. The order of the characters is the same when we read from left and right.&lt;/p&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll explain three different ways to check if a string is a palindrome or not in C#.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A palindrome is a group of characters or a word that reads the same if we read from left to right and right to left. An example of a palindrome string is the word &amp;ldquo;MALAYALAM&amp;rdquo;. The order of the characters is the same when we read from left and right.&lt;/p&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll explain three different ways to check if a string is a palindrome or not in C#.&lt;/p&gt;
&lt;p&gt;Here are some more examples of a palindrome.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lol&lt;/li&gt;
&lt;li&gt;Wow&lt;/li&gt;
&lt;li&gt;Level&lt;/li&gt;
&lt;li&gt;Radar&lt;/li&gt;
&lt;li&gt;Peep&lt;/li&gt;
&lt;li&gt;Mom&lt;/li&gt;
&lt;li&gt;Noon&lt;/li&gt;
&lt;li&gt;Eye&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-using-reverse-method&#34;&gt;1) Using Reverse() Method&lt;/h2&gt;
&lt;p&gt;The easiest way to solve this problem is to use the string Reverse() method. In this method, we&amp;rsquo;re comparing the original string with the reverse of the string in an if conditional statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter any word&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = Console.ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; reverse = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, text.Reverse());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(text == reverse)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Palindrome&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not palindrome&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-reverse-using-for-loop&#34;&gt;2) Reverse using for loop&lt;/h2&gt;
&lt;p&gt;The second method is to use a for loop to iterate over the string starting from the last character to find the reverse and then compare it with the original string.&lt;/p&gt;
&lt;p&gt;Use this method if you don&amp;rsquo;t want to use any built-in string methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter any word&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = Console.ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; reverse = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Empty;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = text.Length - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i--)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    reverse += text[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (text == reverse)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Palindrome&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not Palindrome&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-without-finding-the-reverse-of-the-string&#34;&gt;3) Without finding the reverse of the string&lt;/h2&gt;
&lt;p&gt;Unlike the first two methods, we don&amp;rsquo;t have to find the reverse of the string in this method. Instead, we&amp;rsquo;re directly checking the first character with the last character, the second character with the second-last character, and so on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;👉 The index of the last character in a string can be found by subtracting 1 from the value of the Length property.&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter any word&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = Console.ReadLine();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length = text.Length - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; hasMismatch = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; text.Length; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(text[i] != text[length - i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        hasMismatch = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hasMismatch)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not palindrome&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Palindrome&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we learned three different ways to check if the given string is a palindrome or not in C#. If you would like to share any other methods, please share them in the comments.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>How to Use Entity Framework Core in a Console Application</title>
      <link>https://mishelshaji.com/blog/how-to-use-entity-framework-core-in-a-console-application/</link>
      <pubDate>Fri, 14 Feb 2025 15:20:45 +0530</pubDate>
      
      <guid>https://mishelshaji.com/blog/how-to-use-entity-framework-core-in-a-console-application/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Entity framework core is an ORM (Object Relational Mapper) for .NET. It can be configured to work with different databases like SQL Server, MySQL, SQLite, etc through database providers. In this post, we&amp;rsquo;ll learn to use Entity Framework in a .NET Core Console application.&lt;/p&gt;
&lt;h2 id=&#34;create-a-console-application&#34;&gt;Create a Console Application&lt;/h2&gt;
&lt;p&gt;Create a new .NET Core console application in Visual Studio. Select .NET 6 or newer as the framework version.&lt;/p&gt;
&lt;h2 id=&#34;install-entity-framework&#34;&gt;Install Entity Framework&lt;/h2&gt;
&lt;p&gt;The next step is to install the required packages. This includes Entity Framework Core, MSSQL Database Provider, and Entity Framework Core Tools.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Entity framework core is an ORM (Object Relational Mapper) for .NET. It can be configured to work with different databases like SQL Server, MySQL, SQLite, etc through database providers. In this post, we&amp;rsquo;ll learn to use Entity Framework in a .NET Core Console application.&lt;/p&gt;
&lt;h2 id=&#34;create-a-console-application&#34;&gt;Create a Console Application&lt;/h2&gt;
&lt;p&gt;Create a new .NET Core console application in Visual Studio. Select .NET 6 or newer as the framework version.&lt;/p&gt;
&lt;h2 id=&#34;install-entity-framework&#34;&gt;Install Entity Framework&lt;/h2&gt;
&lt;p&gt;The next step is to install the required packages. This includes Entity Framework Core, MSSQL Database Provider, and Entity Framework Core Tools.&lt;/p&gt;
&lt;p&gt;The Tools package is optional. However, if you want to use commands like Add-Migration and Update-Database, this package is required.&lt;/p&gt;
&lt;p&gt;To install these packages, open NuGet Package Manager Console and run the following Commands. NuGet Package Manager Console can be opened from &lt;strong&gt;Tools -&amp;gt; NuGetPackage Manager -&amp;gt; Package Manager Console&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Install-Package Microsoft.EntityFrameworkCore -Version 6.0.6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Install-Package Microsoft.EntityFrameworkCore.SqlServer -Version 6.0.6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Install-Package Microsoft.EntityFrameworkCore.Tools -Version 6.0.6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-db-context&#34;&gt;Create DB Context&lt;/h2&gt;
&lt;p&gt;After installing the required packages, we have to create a DBContext. So, create a new class called ApplicationDbContext and add the following code to it. I recommend adding it into a folder called Data. The ApplicationDbContext class should inherit the DbContext class. You have to add a reference to Microsoft.EntityFrameworkCore.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ConsoleApp3.Data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ApplicationDbContext&lt;/span&gt;: DbContext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next step is to provide Entity Framework with database configurations and a connection string. For that, we have to override the OnConfiguring method of our ApplicationDbContext class.&lt;/p&gt;
&lt;h2 id=&#34;create-a-model&#34;&gt;Create a Model&lt;/h2&gt;
&lt;p&gt;As the last step, we have to create a model. In this example, I am creating a model to save the Name and Value of a color.&lt;/p&gt;
&lt;p&gt;Add the model to the database context.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ConsoleApp3.Models;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ConsoleApp3.Data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ApplicationDbContext&lt;/span&gt;: DbContext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnConfiguring(DbContextOptionsBuilder optionsBuilder)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.OnConfiguring(optionsBuilder);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        optionsBuilder.UseSqlServer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server=.;Database=MyDb;Integrated Security=true&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DbSet&amp;lt;Color&amp;gt; Colors { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;execute-query&#34;&gt;Execute Query&lt;/h2&gt;
&lt;p&gt;Finally, let us execute some queries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ConsoleApp3.Data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; ConsoleApp3.Models;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; db = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ApplicationDbContext();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; colors = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Color[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Color(){Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;, Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FF0000&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Color(){Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;, Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00FF00&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Color(){Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;, Value = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0000FF&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.Colors.AddRange(colors);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.SaveChanges();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Starting with .NET 6 (C# 10), we can avoid the explicit type declaration for the arrays and other types.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post, we learned to use Entity Framework in a .Net Core Console Application. If you have any questions, let me know in the comments below.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>How to Resize an Array in C Sharp</title>
      <link>https://mishelshaji.com/blog/how-to-resize-an-array-in-c-sharp/</link>
      <pubDate>Fri, 14 Feb 2025 14:59:30 +0530</pubDate>
      
      <guid>https://mishelshaji.com/blog/how-to-resize-an-array-in-c-sharp/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Resizing an array is usually done if the exact number of elements that have to be stored in an array is unknown. Fortunately, C# has a method called Array.Resize().&lt;/p&gt;
&lt;h2 id=&#34;arrayresize-method&#34;&gt;Array.Resize() Method&lt;/h2&gt;
&lt;p&gt;With the Array.Resize() method, we can resize any existing array to a new size. We can expand or shrink the size of an array using this method.&lt;/p&gt;
&lt;p&gt;It takes two parameters. The first parameter is the array itself and the second parameter is the new size of the array.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Resizing an array is usually done if the exact number of elements that have to be stored in an array is unknown. Fortunately, C# has a method called Array.Resize().&lt;/p&gt;
&lt;h2 id=&#34;arrayresize-method&#34;&gt;Array.Resize() Method&lt;/h2&gt;
&lt;p&gt;With the Array.Resize() method, we can resize any existing array to a new size. We can expand or shrink the size of an array using this method.&lt;/p&gt;
&lt;p&gt;It takes two parameters. The first parameter is the array itself and the second parameter is the new size of the array.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;Now, let us resize an array dynamically using the Array.Resize() method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Declaring an array with size 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] numbers = { &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Length before resizing: &amp;#34;&lt;/span&gt; + numbers.Length);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Resizing the array to hold 4 elements&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Array.Resize(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; numbers, numbers.Length + &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;numbers[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;numbers[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Length after resizing: &amp;#34;&lt;/span&gt; + numbers.Length);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can shrink the size of an existing array. Here&amp;rsquo;s an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Declaring an array with size 4.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] numbers = { &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Length before resizing: &amp;#34;&lt;/span&gt; + numbers.Length);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Elements are: &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;, numbers));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Resizing the array to 2.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Array.Resize(&lt;span style=&#34;color:#66d9ef&#34;&gt;ref&lt;/span&gt; numbers, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Length after resizing: &amp;#34;&lt;/span&gt; + numbers.Length);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Elements are: &amp;#34;&lt;/span&gt; + &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;, numbers));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have any questions, please share them in the comments below.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Contact Us</title>
      <link>https://mishelshaji.com/contact/</link>
      <pubDate>Fri, 14 Feb 2025 02:42:17 +0000</pubDate>
      
      <guid>https://mishelshaji.com/contact/</guid>
      <description>&lt;h1 id=&#34;contact-us&#34;&gt;Contact Us&lt;/h1&gt;
&lt;h2 id=&#34;get-in-touch&#34;&gt;Get in Touch&lt;/h2&gt;
&lt;p&gt;Thank you for your interest in reaching out! Whether you have questions about my training programs, want to discuss a potential collaboration, or simply wish to connect, I’d love to hear from you.&lt;/p&gt;
&lt;h3 id=&#34;contact-information&#34;&gt;Contact Information&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Mishel Shaji&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: &lt;a href=&#34;mailto:hello@mishelshaji.com&#34;&gt;hello@mishelshaji.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LinkedIn&lt;/strong&gt;: &lt;a href=&#34;https://linkedin.com/in/mishelshaji&#34;&gt;linkedin.com/in/mishelshaji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mishelshaji&#34;&gt;github.com/mishelshaji&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-reach-me&#34;&gt;How to Reach Me&lt;/h3&gt;
&lt;p&gt;Feel free to drop me an email, connect with me on LinkedIn, or check out my projects on GitHub. I strive to respond to all inquiries as quickly as possible, so don’t hesitate to reach out!&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;contact-us&#34;&gt;Contact Us&lt;/h1&gt;
&lt;h2 id=&#34;get-in-touch&#34;&gt;Get in Touch&lt;/h2&gt;
&lt;p&gt;Thank you for your interest in reaching out! Whether you have questions about my training programs, want to discuss a potential collaboration, or simply wish to connect, I’d love to hear from you.&lt;/p&gt;
&lt;h3 id=&#34;contact-information&#34;&gt;Contact Information&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Mishel Shaji&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt;: &lt;a href=&#34;mailto:hello@mishelshaji.com&#34;&gt;hello@mishelshaji.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LinkedIn&lt;/strong&gt;: &lt;a href=&#34;https://linkedin.com/in/mishelshaji&#34;&gt;linkedin.com/in/mishelshaji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mishelshaji&#34;&gt;github.com/mishelshaji&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-reach-me&#34;&gt;How to Reach Me&lt;/h3&gt;
&lt;p&gt;Feel free to drop me an email, connect with me on LinkedIn, or check out my projects on GitHub. I strive to respond to all inquiries as quickly as possible, so don’t hesitate to reach out!&lt;/p&gt;
&lt;h3 id=&#34;lets-connect&#34;&gt;Let&amp;rsquo;s Connect!&lt;/h3&gt;
&lt;p&gt;I look forward to connecting with you and exploring how we can work together to enhance your skills or collaborate on exciting projects. Your journey in technology is important to me, and I’m here to help!&lt;/p&gt;
&lt;p&gt;Thank you for visiting, and I hope to hear from you soon!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://mishelshaji.com/about/</link>
      <pubDate>Fri, 14 Feb 2025 02:32:19 +0000</pubDate>
      
      <guid>https://mishelshaji.com/about/</guid>
      <description>&lt;h1 id=&#34;about-me&#34;&gt;About Me&lt;/h1&gt;
&lt;p&gt;Hello! I’m Mishel Shaji, a passionate Software Developer and Corporate Trainer with a rich history of working in the information technology and services industry. My journey in tech has been both fulfilling and transformative, allowing me to blend my love for coding with my enthusiasm for teaching. As a Software Developer &amp;amp; Technical Trainer, I strive to empower others through knowledge and practical skills, helping them navigate the ever-evolving landscape of technology.&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;about-me&#34;&gt;About Me&lt;/h1&gt;
&lt;p&gt;Hello! I’m Mishel Shaji, a passionate Software Developer and Corporate Trainer with a rich history of working in the information technology and services industry. My journey in tech has been both fulfilling and transformative, allowing me to blend my love for coding with my enthusiasm for teaching. As a Software Developer &amp;amp; Technical Trainer, I strive to empower others through knowledge and practical skills, helping them navigate the ever-evolving landscape of technology.&lt;/p&gt;
&lt;h2 id=&#34;my-background&#34;&gt;My Background&lt;/h2&gt;
&lt;p&gt;With several years of experience under my belt, I have honed my skills in a variety of programming languages and frameworks, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WinForms:&lt;/strong&gt; Crafting robust desktop applications that enhance user experience.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ASP.NET MVC:&lt;/strong&gt; Developing dynamic web applications that are both scalable and maintainable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.NET Core:&lt;/strong&gt; Leveraging cross-platform capabilities to build modern applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blazor:&lt;/strong&gt; Creating interactive web UIs using C# instead of JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PHP:&lt;/strong&gt; Building server-side applications and dynamic websites.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python:&lt;/strong&gt; Utilizing its versatility for web development, data analysis, and automation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WPF:&lt;/strong&gt; Designing rich desktop applications with a focus on user interface and experience.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java:&lt;/strong&gt; Developing cross-platform applications with a strong emphasis on object-oriented programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;my-passion-for-training&#34;&gt;My Passion for Training&lt;/h2&gt;
&lt;p&gt;Training is not just a job for me; it’s a passion that fuels my professional life. I believe that knowledge is most powerful when shared, and I take immense joy in helping others unlock their potential. Here are a few reasons why I love training:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Empowerment:&lt;/strong&gt; There’s nothing more rewarding than seeing someone grasp a new concept or skill. I enjoy empowering individuals to take charge of their learning and career paths.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Learning:&lt;/strong&gt; Teaching forces me to stay updated with the latest technologies and trends. It’s a two-way street where I learn from my students as much as they learn from me.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Building Community:&lt;/strong&gt; Training fosters a sense of community. I love creating an environment where learners can collaborate, share ideas, and support each other.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Making an Impact:&lt;/strong&gt; I am passionate about making a positive impact in the lives of others. By providing quality training, I contribute to their personal and professional growth.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diverse Learning Styles:&lt;/strong&gt; I enjoy adapting my teaching methods to cater to different learning styles. Whether it’s hands-on coding sessions, interactive workshops, or theoretical discussions, I strive to make learning engaging and effective.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;join-me-on-this-journey&#34;&gt;Join Me on This Journey&lt;/h2&gt;
&lt;p&gt;I invite you to join me on this exciting journey of learning and growth. Whether you’re a beginner looking to start your career in tech or an experienced developer aiming to sharpen your skills, there’s something for everyone. Together, we can explore the vast world of technology and unlock new opportunities.&lt;/p&gt;
&lt;p&gt;Thank you for visiting my page, and I look forward to connecting with you soon!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Datatypes in C Sharp</title>
      <link>https://mishelshaji.com/blog/c-sharp-datatypes/</link>
      <pubDate>Fri, 14 Feb 2025 01:57:34 +0000</pubDate>
      
      <guid>https://mishelshaji.com/blog/c-sharp-datatypes/</guid>
      <description>&lt;h1 id=&#34;important-data-types-in-c&#34;&gt;Important Data Types in C#&lt;/h1&gt;
&lt;p&gt;C# is a statically typed language, which means that the type of a variable is known at compile time. Understanding the various data types in C# is crucial for effective programming. In this blog post, we will explore the important data types in C#, categorized into value types, reference types, and special types.&lt;/p&gt;
&lt;h1 id=&#34;understanding-important-data-types-in-c&#34;&gt;Understanding Important Data Types in C#&lt;/h1&gt;
&lt;p&gt;C# is a strongly typed language that provides a rich set of built-in data types. These data types can be broadly categorized into &lt;strong&gt;value types&lt;/strong&gt; and &lt;strong&gt;reference types&lt;/strong&gt;. Understanding these types is crucial for effective programming, as they determine how data is stored, accessed, and manipulated in memory. In this blog post, we will explore the important data types in C#, including their storage sizes, minimum and maximum values, and provide code samples for each type.&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;important-data-types-in-c&#34;&gt;Important Data Types in C#&lt;/h1&gt;
&lt;p&gt;C# is a statically typed language, which means that the type of a variable is known at compile time. Understanding the various data types in C# is crucial for effective programming. In this blog post, we will explore the important data types in C#, categorized into value types, reference types, and special types.&lt;/p&gt;
&lt;h1 id=&#34;understanding-important-data-types-in-c&#34;&gt;Understanding Important Data Types in C#&lt;/h1&gt;
&lt;p&gt;C# is a strongly typed language that provides a rich set of built-in data types. These data types can be broadly categorized into &lt;strong&gt;value types&lt;/strong&gt; and &lt;strong&gt;reference types&lt;/strong&gt;. Understanding these types is crucial for effective programming, as they determine how data is stored, accessed, and manipulated in memory. In this blog post, we will explore the important data types in C#, including their storage sizes, minimum and maximum values, and provide code samples for each type.&lt;/p&gt;
&lt;h2 id=&#34;value-types&#34;&gt;Value Types&lt;/h2&gt;
&lt;p&gt;Value types hold their data directly. When you assign a value type to a new variable, a copy of the value is made. This means that each variable has its own copy of the data. Here are the key value types in C#:&lt;/p&gt;
&lt;h3 id=&#34;1-byte&#34;&gt;1. &lt;strong&gt;byte&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 1 byte&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 255&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;byte&lt;/code&gt; data type is an 8-bit unsigned integer. It is commonly used for storing binary data or when you need to work with small numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; b = &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Byte: {b}, Min: {byte.MinValue}, Max: {byte.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-sbyte&#34;&gt;2. &lt;strong&gt;sbyte&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 1 byte&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: -128&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 127&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;sbyte&lt;/code&gt; data type is an 8-bit signed integer. It is useful when you need to store small signed numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sbyte&lt;/span&gt; sb = -&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;SByte: {sb}, Min: {sbyte.MinValue}, Max: {sbyte.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-short&#34;&gt;3. &lt;strong&gt;short&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 2 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: -32,768&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 32,767&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;short&lt;/code&gt; data type is a 16-bit signed integer. It is used when you need a small range of integer values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; s = &lt;span style=&#34;color:#ae81ff&#34;&gt;32767&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Short: {s}, Min: {short.MinValue}, Max: {short.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-ushort&#34;&gt;4. &lt;strong&gt;ushort&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 2 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 65,535&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;ushort&lt;/code&gt; data type is a 16-bit unsigned integer. It is useful for storing small positive numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ushort&lt;/span&gt; us = &lt;span style=&#34;color:#ae81ff&#34;&gt;65535&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;UShort: {us}, Min: {ushort.MinValue}, Max: {ushort.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-int&#34;&gt;5. &lt;strong&gt;int&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 4 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: -2,147,483,648&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 2,147,483,647&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;int&lt;/code&gt; data type is a 32-bit signed integer. It is the most commonly used integer type in C#.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = -&lt;span style=&#34;color:#ae81ff&#34;&gt;2147483648&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Int: {i}, Min: {int.MinValue}, Max: {int.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;6-uint&#34;&gt;6. &lt;strong&gt;uint&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 4 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 4,294,967,295&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;uint&lt;/code&gt; data type is a 32-bit unsigned integer. It is used when you need to store large positive numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; ui = &lt;span style=&#34;color:#ae81ff&#34;&gt;4294967295&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;UInt: {ui}, Min: {uint.MinValue}, Max: {uint.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;7-long&#34;&gt;7. &lt;strong&gt;long&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 8 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: -9,223,372,036,854,775,808&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 9,223,372,036,854,775,807&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;long&lt;/code&gt; data type is a 64-bit signed integer. It is used for storing large integer values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; l = &lt;span style=&#34;color:#ae81ff&#34;&gt;9223372036854775807&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Long: {l}, Min: {long.MinValue}, Max: {long.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;8-ulong&#34;&gt;8. &lt;strong&gt;ulong&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 8 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 18,446,744,073,709,551,615&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;ulong&lt;/code&gt; data type is a 64-bit unsigned integer. It is used for very large positive numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt; ul = &lt;span style=&#34;color:#ae81ff&#34;&gt;18446744073709551615&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;ULong: {ul}, Min: {ulong.MinValue}, Max: {ulong.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;9-float&#34;&gt;9. &lt;strong&gt;float&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 4 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: ~-3.402823E38&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: ~3.402823E38&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;float&lt;/code&gt; data type is a single-precision 32-bit floating point. It is used for storing decimal numbers with less precision.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; f = &lt;span style=&#34;color:#ae81ff&#34;&gt;3.402823E38F&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Float: {f}, Min: {float.MinValue}, Max: {float.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;10-decimal&#34;&gt;10. &lt;strong&gt;decimal&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 16 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: -79,228,162,514,264,337,593,543,950,335&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: 79,228,162,514,264,337,593,543,950,335&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;decimal&lt;/code&gt; data type is a 128-bit precise decimal value with 28-29 significant digits. It is ideal for financial calculations where precision is crucial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decimal&lt;/span&gt; d = &lt;span style=&#34;color:#ae81ff&#34;&gt;79.228162514264337593543950335&lt;/span&gt;M;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Decimal: {d}, Min: {decimal.MinValue}, Max: {decimal.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;11-bool&#34;&gt;11. &lt;strong&gt;bool&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 1 byte&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;bool&lt;/code&gt; data type represents a Boolean value, which can be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. It is commonly used for conditional statements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Bool: {flag}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;12-char&#34;&gt;12. &lt;strong&gt;char&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: 2 bytes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Min Value&lt;/strong&gt;: &amp;lsquo;\u0000&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Value&lt;/strong&gt;: &amp;lsquo;\uFFFF&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;char&lt;/code&gt; data type represents a single 16-bit Unicode character. It is used for storing characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Char: {c}, Min: {char.MinValue}, Max: {char.MaxValue}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference-types&#34;&gt;Reference Types&lt;/h2&gt;
&lt;p&gt;Reference types store references to their data (objects), rather than the data itself. When you assign a reference type to a new variable, you are copying the reference, not the actual data. Here are some important reference types in C#:&lt;/p&gt;
&lt;h3 id=&#34;1-string&#34;&gt;1. &lt;strong&gt;string&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: Varies (depends on the length of the string)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Reference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;string&lt;/code&gt; data type represents a sequence of characters. Strings are immutable, meaning once created, their value cannot be changed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;String: {str}, Length: {str.Length}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-class&#34;&gt;2. &lt;strong&gt;class&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: Varies (depends on the class definition)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Reference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; is a blueprint for creating objects. It can contain fields, properties, methods, and events.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Age { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Person person = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person { Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;, Age = &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Class: Name = {person.Name}, Age = {person.Age}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-list&#34;&gt;3. &lt;strong&gt;list&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: Varies (depends on the number of elements)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Reference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; is a generic collection that can dynamically resize. It is used to store a collection of objects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; numbers = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;List: {string.Join(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, numbers)}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-array&#34;&gt;4. &lt;strong&gt;array&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: Varies (depends on the number of elements)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Reference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An &lt;code&gt;array&lt;/code&gt; is a fixed-size collection of elements of the same type. It is used to store multiple values in a single variable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] array = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Array: {string.Join(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, array)}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-dictionary&#34;&gt;5. &lt;strong&gt;dictionary&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage Size&lt;/strong&gt;: Varies (depends on the number of key-value pairs)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: Reference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;code&gt;Dictionary&amp;lt;TKey, TValue&amp;gt;&lt;/code&gt; is a collection of key-value pairs. It is used to store data in a way that allows for fast lookups by key.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; dictionary = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;One&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Two&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Three&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Dictionary: {string.Join(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, dictionary.Select(kvp =&amp;gt; $&amp;#34;&lt;/span&gt;{kvp.Key}: {kvp.Value}&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;))}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Understanding the differences between value types and reference types is essential for efficient memory management and performance in C#. Here’s a quick recap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Value Types&lt;/strong&gt;: Store data directly, have a fixed size, and are allocated on the stack. Examples include &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, and &lt;code&gt;bool&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference Types&lt;/strong&gt;: Store references to data, have variable sizes, and are allocated on the heap. Examples include &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, and &lt;code&gt;dictionary&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By knowing the characteristics of these data types, you can make informed decisions about which type to use in your applications, optimizing both performance and memory usage. Understanding these types will help you write more efficient and effective C# code.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Welcome to My Blog - My First Post</title>
      <link>https://mishelshaji.com/blog/my-first-post/</link>
      <pubDate>Thu, 13 Feb 2025 18:00:41 +0530</pubDate>
      
      <guid>https://mishelshaji.com/blog/my-first-post/</guid>
      <description>&lt;h1 id=&#34;why-i-started-this-blog&#34;&gt;Why I Started This Blog&lt;/h1&gt;
&lt;p&gt;Starting a blog is a significant step for anyone passionate about a subject, and for me, that subject is coding. As I embark on this journey, I want to share the reasons behind my decision to create this blog and what I hope to achieve through it.&lt;/p&gt;
&lt;h2 id=&#34;1-why-i-like-to-code&#34;&gt;1. Why I Like to Code&lt;/h2&gt;
&lt;p&gt;Coding has always fascinated me. The ability to create something from nothing, to solve complex problems, and to bring ideas to life through programming is incredibly rewarding. Here are a few reasons why I love coding:&lt;/p&gt;</description>
      <content>&lt;h1 id=&#34;why-i-started-this-blog&#34;&gt;Why I Started This Blog&lt;/h1&gt;
&lt;p&gt;Starting a blog is a significant step for anyone passionate about a subject, and for me, that subject is coding. As I embark on this journey, I want to share the reasons behind my decision to create this blog and what I hope to achieve through it.&lt;/p&gt;
&lt;h2 id=&#34;1-why-i-like-to-code&#34;&gt;1. Why I Like to Code&lt;/h2&gt;
&lt;p&gt;Coding has always fascinated me. The ability to create something from nothing, to solve complex problems, and to bring ideas to life through programming is incredibly rewarding. Here are a few reasons why I love coding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creativity&lt;/strong&gt;: Coding is a form of art. Just like a painter uses colors to create a masterpiece, I use code to build applications, websites, and tools that can make a difference. The creative process involved in coding allows me to express my ideas and innovate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Problem-Solving&lt;/strong&gt;: Every coding challenge is a puzzle waiting to be solved. I enjoy the thrill of breaking down complex problems into manageable parts and finding efficient solutions. This analytical aspect of coding keeps my mind sharp and engaged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuous Learning&lt;/strong&gt;: The tech industry is always evolving, and there’s always something new to learn. Whether it’s a new programming language, framework, or technology, coding keeps me on my toes and encourages lifelong learning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Impact&lt;/strong&gt;: Coding has the power to change lives. Whether it’s developing software that improves productivity or creating applications that help people connect, I love knowing that my work can have a positive impact on others.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-i-want-to-share-what-i-learn&#34;&gt;2. I Want to Share What I Learn&lt;/h2&gt;
&lt;p&gt;One of the most fulfilling aspects of coding is the community that surrounds it. I’ve learned so much from others, and I want to give back by sharing my knowledge and experiences. Here’s why sharing is important to me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Knowledge Sharing&lt;/strong&gt;: By documenting what I learn, I can help others who are on a similar journey. Whether they are beginners looking for guidance or experienced developers seeking new insights, I hope my blog can serve as a valuable resource.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Building a Community&lt;/strong&gt;: I believe that sharing knowledge fosters collaboration and growth. Through this blog, I hope to connect with like-minded individuals, exchange ideas, and learn from each other’s experiences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Personal Growth&lt;/strong&gt;: Teaching others is one of the best ways to solidify my own understanding. Writing about coding concepts and sharing my projects will help me reinforce my knowledge and identify areas where I can improve.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-i-also-use-this-website-as-a-reference&#34;&gt;3. I Also Use This Website as a Reference&lt;/h2&gt;
&lt;p&gt;In addition to sharing my knowledge, I see this blog as a personal reference tool. Here’s how it serves that purpose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation of My Journey&lt;/strong&gt;: As I learn new technologies and techniques, I want to document my progress. This blog will serve as a chronological record of my growth as a developer, allowing me to look back and see how far I’ve come.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Quick Reference&lt;/strong&gt;: Sometimes, I forget certain coding concepts or syntax. By writing about them, I create a quick reference guide for myself. This way, I can easily revisit topics I’ve covered and refresh my memory when needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encouragement to Stay Consistent&lt;/strong&gt;: Maintaining a blog encourages me to stay consistent in my learning. Knowing that I’ll be sharing my insights with others motivates me to keep exploring and experimenting with new ideas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Starting this blog is an exciting endeavor for me. It’s a platform where I can express my passion for coding, share my knowledge, and document my journey. I hope to create a space where others can learn, grow, and connect with the coding community. Thank you for joining me on this adventure, and I look forward to sharing my experiences with you!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
